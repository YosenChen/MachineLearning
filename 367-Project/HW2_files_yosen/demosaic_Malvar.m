function color_out = demosaic_linear(bayer_in)
    
    [nrow, ncol] = size(bayer_in);
    R = double(bayer_in);
    G = double(bayer_in);
    B = double(bayer_in);
    % set 0's for R channel, can be verified by showing R(1:10, 1:10)
    R(2:2:end, :) = 0;
    R(1:2:end, 2:2:end) = 0;
    % set 0's for B channel, can be verified by showing B(1:10, 1:10)
    B(1:2:end, :) = 0;
    B(2:2:end, 1:2:end) = 0;
    % set 0's for G channel
    G(1:2:end, 1:2:end) = 0;
    G(2:2:end, 2:2:end) = 0;
    
    for r = 3:(nrow-2)
        for c = 3:(ncol-2)
            if (mod(r, 2)==1 & mod(c, 2)==0) % at G, Rrow Bcol
                R(r, c) = (G(r, c)*5 + ...
                           G(r-1, c-1)*(-1) + G(r-1, c+1)*(-1) + G(r+1, c-1)*(-1) + G(r+1, c+1)*(-1) + ...
                           G(r, c-2)*(-1) + G(r, c+2)*(-1) + ...
                           G(r-2, c)*0.5 + G(r+2, c)*0.5 + ...
                           R(r, c-1)*4 + R(r, c+1)*4)/8;
                B(r, c) = (G(r, c)*5 + ...
                           G(r-1, c-1)*(-1) + G(r-1, c+1)*(-1) + G(r+1, c-1)*(-1) + G(r+1, c+1)*(-1) + ...
                           G(r-2, c)*(-1) + G(r+2, c)*(-1) + ...
                           G(r, c-2)*0.5 + G(r, c+2)*0.5 + ...
                           B(r-1, c)*4 + B(r+1, c)*4)/8;
                           
            elseif (mod(r, 2)==0 & mod(c, 2)==1) % at G, Brow Rcol
                R(r, c) = (G(r, c)*5 + ...
                           G(r-1, c-1)*(-1) + G(r-1, c+1)*(-1) + G(r+1, c-1)*(-1) + G(r+1, c+1)*(-1) + ...
                           G(r-2, c)*(-1) + G(r+2, c)*(-1) + ...
                           G(r, c-2)*0.5 + G(r, c+2)*0.5 + ...
                           R(r-1, c)*4 + R(r+1, c)*4)/8;
                B(r, c) = (G(r, c)*5 + ...
                           G(r-1, c-1)*(-1) + G(r-1, c+1)*(-1) + G(r+1, c-1)*(-1) + G(r+1, c+1)*(-1) + ...
                           G(r, c-2)*(-1) + G(r, c+2)*(-1) + ...
                           G(r-2, c)*0.5 + G(r+2, c)*0.5 + ...
                           B(r, c-1)*4 + B(r, c+1)*4)/8;
                           
            elseif (mod(r, 2)==0 & mod(c, 2)==0) % at B
                R(r, c) = (B(r, c)*6 + ...
                           B(r-2, c)*(-1.5) + B(r+2, c)*(-1.5) + B(r, c-2)*(-1.5) + B(r, c+2)*(-1.5) + ...
                           R(r-1, c-1)*2 + R(r-1, c+1)*2 + R(r+1, c-1)*2 + R(r+1, c+1)*2)/8;
                G(r, c) = (B(r, c)*4 + ...
                           B(r-2, c)*(-1) + B(r+2, c)*(-1) + B(r, c-2)*(-1) + B(r, c+2)*(-1) + ...
                           G(r-1, c)*2 + G(r+1, c)*2 + G(r, c-1)*2 + G(r, c+1)*2)/8;

            else % at R
                G(r, c) = (R(r, c)*4 + ...
                           R(r-2, c)*(-1) + R(r+2, c)*(-1) + R(r, c-2)*(-1) + R(r, c+2)*(-1) + ...
                           G(r-1, c)*2 + G(r+1, c)*2 + G(r, c-1)*2 + G(r, c+1)*2)/8;
                B(r, c) = (R(r, c)*6 + ...
                           R(r-2, c)*(-1.5) + R(r+2, c)*(-1.5) + R(r, c-2)*(-1.5) + R(r, c+2)*(-1.5) + ...
                           B(r-1, c-1)*2 + B(r-1, c+1)*2 + B(r+1, c-1)*2 + B(r+1, c+1)*2)/8;
            end
        end
    end
    R(1:10, 1:10)
    G(1:10, 1:10)
    B(1:10, 1:10)
    color_out = cat(3, R, G, B);
    color_out(1:2, :, :) = 0;
    color_out((nrow-1):nrow, :, :) = 0;
    color_out(:, 1:2, :) = 0;
    color_out(:, (ncol-1):ncol, :) = 0;
    color_out = uint8(color_out);

end
